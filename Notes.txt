// 5. react-query-states video notes
1. If the component is unmounted then the query will be in inactive state
2. As the component mounts it fetches the query and goes into state
3. Even if the app window/ browser tab is out focused and then in focused then als it will fetch and goes to stale
4. stale means "not fresh", so as you go out and in it will fetch data again (as the data is not fresh, means it wants to fetch fresh data)
5. fresh state means that the data fetched from query is recent/fresh. In this state if you do out and in focus it will not fetch data again 

// 6. devtools explained video 
1. "Observers : 1" means number of components using the query (in our case 1). Your query can be used in multiple components
2. You can see current state and initial state 

//7. Query keys
1. If your query function depends on a variable, include it in your query key, as shown below
  function Todos({ todoId }) {
  const result = useQuery(['todos', todoId], () => fetchTodoById(todoId))
}

// 8. Dependent queries 
As you cannot use "if else" statement to control the query, there is a third argument "enabled" if its true then query runs else if its false 
then query won't run. if enabled is false then isIdle will be true and vice-versa.

// 10. creating a mini blog
If you click on a particular post for 1st time then its shows loading but 2nd time it doesnot show loading it uses the cached data and shows the data.
Even though it shows cached data but network request goes each time you visit the particular post  

// 12. cache time in react
cache time is used to determine how long query result will be available in the cache.
If we put cacheTime as 0 then the query wont store data in cache

// 13. We can transfrom the query result using 'select' key 
example -> useQuery(['posts'], url, {
      select: (result) => result.slice(0, 5),
    }
  );

  // 14. setQueryData is used to update/set the cached data

  // 15. Stale time and Cache time
   By default react query stale time : 0 seconds
   By default react query cache time : 300 seconds
  StaleTime: The duration until a query transitions from fresh to stale. 
             As long as the query is fresh, data will always be read from the cache only - no network request will happen! 
             If the query is stale (which per default is: instantly), you will still get data from the cache, but a background refetch can happen under certain conditions.

  CacheTime: The duration until inactive queries will be removed from the cache. 
             This defaults to 5 minutes. Queries transition to the inactive state as soon as there are no observers registered, so when all components which use that query have unmounted.

  // 16. Mutations
  In a mutation the intention is to create some change in the backend state. (e.g. creating a new record in a database, or updating an existing record).
  It's the equivalent of a read (query) vs write (mutation) operation.
   Mutations are not cached. They are driven with events

// Learnings from webdevsimplified react-query course
1. onMouseEnter/hover we can prefetch the api before actually landing on the page as shown below :
queryClient.prefetchQuery({
      queryKey: ["posts", 1],
      queryFn: () => getPost(1),
    })

2. We can have placeholder data as initial data as shown below
const postsQuery = useQuery({
    queryKey: ["posts"],
    queryFn: getPosts,
    placeholderData: [{ id: 1, title: "Initial Data" }],
  })

3.
